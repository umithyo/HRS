// <auto-generated />
using System;
using HRS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HRS.Migrations
{
    [DbContext(typeof(ManagerContext))]
    [Migration("20190424220622_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HRS.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<Guid>("DoctorId");

                    b.Property<Guid>("PatientId");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HRS.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("HRS.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int>("HospitalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PolyclinicId");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("HRS.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TownId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HRS.Models.Polyclinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int?>("HospitalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Polyclinics");
                });

            modelBuilder.Entity("HRS.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("HRS.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClinicsId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int?>("HospitalsId");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Role");

                    b.Property<int>("TCKimlikNo");

                    b.HasKey("Id");

                    b.HasIndex("ClinicsId");

                    b.HasIndex("HospitalsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HRS.Models.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("HRS.Models.Appointment", b =>
                {
                    b.HasOne("HRS.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HRS.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HRS.Models.Clinic", b =>
                {
                    b.HasOne("HRS.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HRS.Models.Polyclinic", "Polyclinic")
                        .WithMany()
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HRS.Models.Hospital", b =>
                {
                    b.HasOne("HRS.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HRS.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");
                });

            modelBuilder.Entity("HRS.Models.Polyclinic", b =>
                {
                    b.HasOne("HRS.Models.Hospital", "Hospital")
                        .WithMany("Polyclinics")
                        .HasForeignKey("HospitalId");
                });

            modelBuilder.Entity("HRS.Models.Town", b =>
                {
                    b.HasOne("HRS.Models.City", "City")
                        .WithMany("Towns")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HRS.Models.User", b =>
                {
                    b.HasOne("HRS.Models.Clinic", "Clinics")
                        .WithMany()
                        .HasForeignKey("ClinicsId");

                    b.HasOne("HRS.Models.Hospital", "Hospitals")
                        .WithMany()
                        .HasForeignKey("HospitalsId");
                });

            modelBuilder.Entity("HRS.Models.UserInfo", b =>
                {
                    b.HasOne("HRS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
